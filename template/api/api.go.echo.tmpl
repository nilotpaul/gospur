{{- if .Render.IsTemplates -}}
package api

import (
	"html/template"
	"io"
	"log"
	"strings"

	"{{ .ModPath }}/config"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
)

type ServerConfig struct {
	// Serving static assets from `public` folder.
	ServeStatic func(*echo.Echo) *echo.Route

	// LoadTemplates will return the executed html templates.
	// In development, it'll log the errors only.
	// In production, it'll panic and crash.
	LoadTemplates func(*echo.Echo) *template.Template
}

type APIServer struct {
	listenAddr string
	env        config.EnvConfig
	ServerConfig
}

func NewAPIServer(env config.EnvConfig, cfg ServerConfig) *APIServer {
	return &APIServer{
		listenAddr:   ":" + env.PORT,
		env:          env,
		ServerConfig: cfg,
	}
}

// Start will run the API Server
// Any global middlewares like Logger should be registered here.
func (api *APIServer) Start() error {
	e := echo.New()

	// Global Middlewares
	api.registerGlobalMiddlewares(e)

	// Routes
	r := NewRouter(api.env)
	r.RegisterRoutes(e.Router())

	log.Printf("Visit http://localhost%s", api.listenAddr)

	return e.Start(api.listenAddr)
}

type Template struct {
	templates *template.Template
	env       config.EnvConfig
}

func (t *Template) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
	return t.templates.ExecuteTemplate(w, name, map[string]any{
		"IsDev": !t.env.IsProduction(),
		"Ctx":   data,
	},
	)
}

// Extend the list of global middlewares as needed.
func (api *APIServer) registerGlobalMiddlewares(e *echo.Echo) {
	e.Use(middleware.Recover())
	e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{
		Skipper: func(c echo.Context) bool {
			// Skipping Logging of public assets.
			return strings.HasPrefix(c.Path(), "/public")
		},
		Format: "-> '${uri}' - ${method} (${status})\n",
	}))

	e.HTTPErrorHandler = HTTPErrorHandler
	e.Renderer = &Template{templates: api.LoadTemplates(e), env: api.env}

	api.ServeStatic(e)
}
{{- else if .Render.IsSeperate -}}
package api

import (
	"log"

	"{{ .ModPath }}/config"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
)

type ServerConfig struct {
	// Serving static assets from `web` folder.
	ServeStatic func(*echo.Echo)
}

type APIServer struct {
	listenAddr string
	env        config.EnvConfig
	ServerConfig
}

func NewAPIServer(env config.EnvConfig, cfg ServerConfig) *APIServer {
	return &APIServer{
		listenAddr:   ":" + env.PORT,
		env:          env,
		ServerConfig: cfg,
	}
}

// Start will run the API Server
// Any global middlewares like Logger should be registered here.
func (api *APIServer) Start() error {
	e := echo.New()

	// Global Middlewares
	api.registerGlobalMiddlewares(e)

	// Routes
	r := NewRouter(api.env)
	r.RegisterRoutes(e.Router())

	log.Printf("Visit http://localhost%s", api.listenAddr)

	return e.Start(api.listenAddr)
}

// Extend the list of global middlewares as needed.
func (api *APIServer) registerGlobalMiddlewares(e *echo.Echo) {
	e.Use(middleware.Recover())
	e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{
		Format: "-> '${uri}' - ${method} (${status})\n",
	}))

	e.HTTPErrorHandler = HTTPErrorHandler

	api.ServeStatic(e)
}
{{- end -}}