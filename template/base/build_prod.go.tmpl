{{- if and .Web.IsEcho .Render.IsTemplates -}}
//go:build !dev
// +build !dev

package main

import (
	"embed"
	"html/template"

	"github.com/labstack/echo/v4"
)

//go:embed public/*
var publicFS embed.FS

//go:embed web/*
var templateFS embed.FS

func ServeStatic(e *echo.Echo) {
	root := "public"
	e.StaticFS("/public", echo.MustSubFS(publicFS, root))
}

func parseTemplates(patterns ...string) (*template.Template, error) {
	tmpl := template.New("")

	parsedTmpl, err := tmpl.ParseFS(templateFS, patterns...)
	tmpl = parsedTmpl

	return tmpl, err
}

func LoadTemplates(patterns ...string) *template.Template {
	return template.Must(parseTemplates(patterns...))
}
{{- else if and .Web.IsFiber .Render.IsTemplates -}}
//go:build !dev
// +build !dev

package main

import (
	"embed"
	"io/fs"
	"net/http"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/filesystem"
	"github.com/gofiber/template/html/v2"
)

//go:embed public/*
var publicFS embed.FS

//go:embed web/*
var templateFS embed.FS

func ServeStatic(app *fiber.App) fiber.Router {
	root := "public"
	return app.Use("/public", filesystem.New(filesystem.Config{
		PathPrefix: root,
		Root:       http.FS(publicFS),
	}))
}

func LoadTemplates() *html.Engine {
	subFS, err := fs.Sub(templateFS, "web")
	if err != nil {
		panic(err)
	}

	return html.NewFileSystem(http.FS(subFS), ".html")
}
{{- else if and .Web.IsChi .Render.IsTemplates -}}
//go:build !dev
// +build !dev

package main

import (
	"embed"
	"html/template"
	"log"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

//go:embed public/*
var publicFS embed.FS

//go:embed web/*
var templateFS embed.FS

func ServeStatic(mux *chi.Mux) {
	fs := http.FileServer(http.FS(publicFS))
	mux.Get("/public/*", fs.ServeHTTP)
}

func parseTemplates(patterns ...string) (*template.Template, error) {
	tmpl := template.New("")
	// adding the embed function for layouts
	tmpl.Funcs(template.FuncMap{
		"embed": func(name string, data any) template.HTML {
			var out strings.Builder
			if err := tmpl.ExecuteTemplate(&out, name, data); err != nil {
				log.Println(err)
			}
			return template.HTML(out.String())
		},
	})

	parsedTmpl, err := tmpl.ParseFS(templateFS, patterns...)
	tmpl = parsedTmpl

	return tmpl, err
}

func LoadTemplates(patterns ...string) *template.Template {
	return template.Must(parseTemplates(patterns...))
}
{{- end -}}
{{- if and .Web.IsEcho .Render.IsSeperate -}}
//go:build !dev
// +build !dev

package main

import (
	"embed"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
)

//go:embed web/dist/*
var web embed.FS

func ServeStatic(e *echo.Echo) {
	const (
		root     = "web/dist"
		index    = "index.html"
	)

	e.Use(middleware.StaticWithConfig(middleware.StaticConfig{
		Root:       root,
		Index:      index,
		HTML5:      true,
		Filesystem: http.FS(web),
	}))
}
{{- else if and .Web.IsFiber .Render.IsSeperate -}}
//go:build !dev
// +build !dev

package main

import (
	"embed"
	"io/fs"
	"log"
	"net/http"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/filesystem"
)

//go:embed web/dist/*
var web embed.FS

func ServeStatic(app *fiber.App) {
	const (
		root     = "web/dist"
		index    = "index.html"
		fallback = "index.html"
	)

	subFS, err := fs.Sub(web, root)
	if err != nil {
		log.Fatal(err)
	}

	app.Use(filesystem.New(filesystem.Config{
		Root:         http.FS(subFS),
		Browse:       false,
		Index:        index,
		NotFoundFile: fallback,
	}))
}
{{- else if and .Web.IsChi .Render.IsSeperate -}}
//go:build !dev
// +build !dev

package main

import (
	"embed"
	"io/fs"
	"log"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

//go:embed web/dist/*
var web embed.FS

func ServeStatic(mux *chi.Mux) {
	const (
		root     = "web/dist"
		index    = "index.html"
		fallback = "index.html"
	)

	subFS, err := fs.Sub(web, root)
	if err != nil {
		log.Fatal(err)
	}

	fs := http.FileServer(http.FS(subFS))

	mux.Handle("/*", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		path := strings.TrimPrefix(r.URL.Path, "/")

		if len(path) == 0 {
			path = index
		}

		// Check if the requested file exists
		_, err := subFS.Open(path)
		if err != nil {
			// If not found, serve index.html (for client-side routing)
			http.ServeFileFS(w, r, subFS, fallback)
			return
		}

		fs.ServeHTTP(w, r)
	}))
}
{{- end -}}