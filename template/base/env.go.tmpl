package config

import (
	"fmt"
	"os"

	"github.com/joho/godotenv"
)

// Add all environment variables here.
type EnvConfig struct {
	Environment string
	Port        string
}

func (env *EnvConfig) IsProduction() bool {
	return env.Environment == "production"
}

// MustloadEnv will load env vars from a .env file.
// If a .env file is not provided it'll fallback to the runtime injected ones.
// It'll parse and validate the env and panic if fails to do so.
func MustloadEnv() *EnvConfig {
	err := godotenv.Load(".env")
	_ = err // discarding the error for later validation

	env := &EnvConfig{
		Environment: os.Getenv("ENVIRONMENT"),
		Port:        os.Getenv("PORT"),
	}
	parsedEnv, err := parseEnv(env)
	if err != nil {
		panic(err)
	}

	return parsedEnv
}

// parseEnv will validate the env variables and assign fallback values.
func parseEnv(env *EnvConfig) (*EnvConfig, error) {
	if env == nil {
		return nil, fmt.Errorf("no environment variables provided")
	}
	if len(env.Port) == 0 {
		// Defaulting to port 3000 if none provided.
		env.Port = "3000"
	}

	return env, nil
}
