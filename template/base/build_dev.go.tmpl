{{- if and .Web.IsEcho .Render.IsTemplates -}}
//go:build dev
// +build dev

package main

import (
	"html/template"
	"os"
	"path/filepath"

	"github.com/labstack/echo/v4"
)

func ServeStatic(e *echo.Echo) *echo.Route {
	return e.Static("/public", "public")
}

// parseTemplates takes a directory where html files will reside.
// It'll check nested dirs and load all files with .html ext.
func parseTemplates() (*template.Template, error) {
	var (
		tmpl = template.New("")
		dir  = "web"
	)

	err := filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
		if err == nil {
			if !info.IsDir() && filepath.Ext(path) == ".html" {
				_, err = tmpl.ParseFiles(path)
				if err != nil {
					return err
				}
			}
		}

		return err
	})

	return tmpl, err
}

func LoadTemplates(e *echo.Echo) *template.Template {
	tmpls, err := parseTemplates()
	if err != nil {
		e.Logger.Error(err)
	}

	return tmpls
}
{{- else if and .Web.IsFiber .Render.IsTemplates -}}
//go:build dev
// +build dev

package main

import (
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/template/html/v2"
)

func ServeStatic(app *fiber.App) fiber.Router {
	return app.Static("/public", "public")
}

func LoadTemplates() *html.Engine {
	return html.New("web", ".html")
}
{{- else if and .Web.IsChi .Render.IsTemplates -}}
//go:build dev
// +build dev

package main

import (
	"html/template"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"

	"github.com/go-chi/chi/v5"
)

func ServeStatic(mux *chi.Mux) {
	fs := http.FileServer(http.Dir("public"))
	mux.Get("/public/*", http.StripPrefix("/public", fs).ServeHTTP)
}

// parseTemplates takes a directory where html files will reside.
// It'll check nested dirs and load all files with .html ext.
func parseTemplates(funcs ...template.FuncMap) (*template.Template, error) {
	var (
		tmpl = template.New("")
		dir  = "web"
	)

	// Registering functions
	funcsMap := template.FuncMap{}
	if len(funcs) > 0 {
		for name, function := range funcs[0] {
			funcsMap[name] = function
		}
	}

	// embed func will help embedding templates from a template.
	funcsMap["embed"] = func(name string, data any) template.HTML {
		var out strings.Builder
		if err := tmpl.ExecuteTemplate(&out, name, data); err != nil {
			log.Println(err)
		}

		return template.HTML(out.String())
	}

	tmpl.Funcs(funcsMap)
	err := filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
		if err == nil {
			if !info.IsDir() && filepath.Ext(path) == ".html" {
				_, err = tmpl.ParseFiles(path)
				if err != nil {
					return err
				}
			}
		}

		return err
	})

	return tmpl, err
}

func LoadTemplates(funcs ...template.FuncMap) *template.Template {
	tmpls, err := parseTemplates(funcs...)
	if err != nil {
		log.Println(err)
	}

	return tmpls
}
{{- end -}}
{{- if and .Web.IsEcho .Render.IsSeperate -}}
//go:build dev
// +build dev

package main

import (
	"github.com/labstack/echo/v4"
)

func ServeStatic(*echo.Echo) {}
{{ else if and .Web.IsFiber .Render.IsSeperate }}
//go:build dev
// +build dev

package main

import (
	"github.com/gofiber/fiber/v2"
)

func ServeStatic(*fiber.App) {}
{{- else if and .Web.IsChi .Render.IsSeperate -}}
//go:build dev
// +build dev

package main

import (
	"github.com/go-chi/chi/v5"
)

func ServeStatic(*chi.Mux) {}
{{- end -}}