{{- if and .Web.IsEcho .Render.IsTemplates -}}
//go:build dev
// +build dev

package main

import (
	"html/template"
	"log"

	"github.com/labstack/echo/v4"
)

func ServeStatic(e *echo.Echo) {
	dir := "public"
	e.Static("/public", dir)
}

func parseTemplates(patterns ...string) (*template.Template, error) {
	tmpl := template.New("")

	for _, pattern := range patterns {
		parsedTmpl, err := tmpl.ParseGlob(pattern)
		if err != nil {
			return nil, err
		}
		tmpl = parsedTmpl
	}

	return tmpl, nil
}

func LoadTemplates(patterns ...string) *template.Template {
	tmpl, err := parseTemplates(patterns...)
	if err != nil {
		log.Printf("template parsing error: %+v\n", err)
	}
	return tmpl
}
{{- else if and .Web.IsFiber .Render.IsTemplates -}}
//go:build dev
// +build dev

package main

import (
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/template/html/v2"
)

func ServeStatic(app *fiber.App) fiber.Router {
    dir := "public"
	return app.Static("/public", dir)
}

func LoadTemplates() *html.Engine {
	return html.New("web", ".html")
}
{{- else if and .Web.IsChi .Render.IsTemplates -}}
//go:build dev
// +build dev

package main

import (
	"html/template"
	"log"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

func ServeStatic(mux *chi.Mux) {
	dir := "public"
	fs := http.FileServer(http.Dir(dir))
	mux.Get("/public/*", http.StripPrefix("/public", fs).ServeHTTP)
}

func parseTemplates(patterns ...string) (*template.Template, error) {
	tmpl := template.New("")
	// adding the embed function for layouts
	tmpl.Funcs(template.FuncMap{
		"embed": func(name string, data any) template.HTML {
			var out strings.Builder
			if err := tmpl.ExecuteTemplate(&out, name, data); err != nil {
				log.Println(err)
			}
			return template.HTML(out.String())
		},
	})

	for _, pattern := range patterns {
		parsedTmpl, err := tmpl.ParseGlob(pattern)
		if err != nil {
			return nil, err
		}
		tmpl = parsedTmpl
	}

	return tmpl, nil
}

func LoadTemplates(patterns ...string) *template.Template {
	tmpl, err := parseTemplates(patterns...)
	if err != nil {
		log.Printf("template parsing error: %+v\n", err)
	}
	return tmpl
}
{{- end -}}
{{- if and .Web.IsEcho .Render.IsSeperate -}}
//go:build dev
// +build dev

package main

import (
	"github.com/labstack/echo/v4"
)

func ServeStatic(*echo.Echo) {}
{{ else if and .Web.IsFiber .Render.IsSeperate }}
//go:build dev
// +build dev

package main

import (
	"github.com/gofiber/fiber/v2"
)

func ServeStatic(*fiber.App) {}
{{- else if and .Web.IsChi .Render.IsSeperate -}}
//go:build dev
// +build dev

package main

import (
	"github.com/go-chi/chi/v5"
)

func ServeStatic(*chi.Mux) {}
{{- end -}}